// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(BookContext))]
    partial class BookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("DAL.Data.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Consistance")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Photo")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("Rating")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GenreId" }, "genre_idx");

                    b.ToTable("book", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Consistance = "Содержание 1",
                            Description = "Описание книги 1",
                            GenreId = 1,
                            Name = "Название книги 1",
                            Photo = "https://w7.pngwing.com/pngs/571/549/png-transparent-california-roll-sushi-canape-platter-garnish-hot-roll-thumbnail.png",
                            Price = 770m,
                            Rating = 5m
                        },
                        new
                        {
                            Id = 2,
                            Consistance = "Содержание ",
                            Description = "Описание книги 2",
                            GenreId = 2,
                            Name = "Название книги 2",
                            Photo = "https://w7.pngwing.com/pngs/964/36/png-transparent-california-roll-makizushi-sushi-tempura-philadelphia-sushi-rolls-food-recipe-sashimi-thumbnail.png",
                            Price = 990m,
                            Rating = 5m
                        },
                        new
                        {
                            Id = 3,
                            Consistance = "Содержание ",
                            Description = "Описание книги 3",
                            GenreId = 1,
                            Name = "Название книги 3",
                            Photo = "https://w7.pngwing.com/pngs/193/635/png-transparent-makizushi-sushi-smoked-salmon-california-roll-pizza-sushi-thumbnail.png",
                            Price = 612m,
                            Rating = 5m
                        },
                        new
                        {
                            Id = 4,
                            Consistance = "Содержание ",
                            Description = "Описание книги 4",
                            GenreId = 2,
                            Name = "Название книги 4",
                            Photo = "https://w7.pngwing.com/pngs/571/549/png-transparent-california-roll-sushi-canape-platter-garnish-hot-roll-thumbnail.png",
                            Price = 562m,
                            Rating = 5m
                        });
                });

            modelBuilder.Entity("DAL.Data.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("genre", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Детектив"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Фэнтези"
                        });
                });

            modelBuilder.Entity("DAL.Data.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("UserRating")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BookId" }, "book_idx");

                    b.HasIndex(new[] { "UserId" }, "user_idx");

                    b.ToTable("library", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            Pages = 0,
                            UserId = 1,
                            UserRating = 1m
                        });
                });

            modelBuilder.Entity("DAL.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Bonuses")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<sbyte>("IsApproved")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("Passport")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bonuses = 0,
                            Email = "abc@gmail.com",
                            IsApproved = (sbyte)1,
                            Name = "Александр Барцев Викторович",
                            Password = "1U+u9QwJ8SdXuiRip3b83S7jiu06Z0PxlaPHFOJZJ+Q=:tiUz98Ow0IbpP7gWSLBCcA==",
                            Phone = "+79038795616",
                            Role = "user"
                        },
                        new
                        {
                            Id = 2,
                            Email = "admin@gmail.com",
                            IsApproved = (sbyte)1,
                            Name = "Администратор",
                            Passport = "2415 771077",
                            Password = "8eqn6A6N11WY0k4j8PLlVfcmDvnUQZJOvTtxdBYtINA=:5tZTJitFXi/473n+fWFzog==",
                            Phone = "+79106151273",
                            Role = "admin"
                        },
                        new
                        {
                            Id = 3,
                            Email = "worker@gmail.com",
                            IsApproved = (sbyte)1,
                            Name = "Работник",
                            Passport = "2416 772076",
                            Password = "ucPtmgnShnsbFBQVZg7kNukEDDluMTr2/fYAq3odDF8=:amw/M3NvUh1kzCQkIJnVIg==",
                            Phone = "+79156251375",
                            Role = "worker"
                        },
                        new
                        {
                            Id = 4,
                            Email = "courier@gmail.com",
                            IsApproved = (sbyte)1,
                            Name = "Курьер",
                            Passport = "2316 771071",
                            Password = "ucPtmgnShnsbFBQVZg7kNukEDDluMTr2/fYAq3odDF8=:amw/M3NvUh1kzCQkIJnVIg==",
                            Phone = "+79176221355",
                            Role = "courier"
                        });
                });

            modelBuilder.Entity("DAL.Data.Book", b =>
                {
                    b.HasOne("DAL.Data.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("userFK");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("DAL.Data.Library", b =>
                {
                    b.HasOne("DAL.Data.Book", "Book")
                        .WithMany("Libraries")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bookIdx");

                    b.HasOne("DAL.Data.User", "User")
                        .WithMany("Libraries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("userId");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Data.Book", b =>
                {
                    b.Navigation("Libraries");
                });

            modelBuilder.Entity("DAL.Data.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DAL.Data.User", b =>
                {
                    b.Navigation("Libraries");
                });
#pragma warning restore 612, 618
        }
    }
}
